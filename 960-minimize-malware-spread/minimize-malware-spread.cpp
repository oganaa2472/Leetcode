class DSU {
public:
    vector<int> parent, size;

    DSU(int n) {
        parent.resize(n);
        size.assign(n, 1);
        for (int i = 0; i < n; ++i)
            parent[i] = i;
    }

    int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]);
        return parent[x];
    }

    void unite(int x, int y) {
        int xr = find(x);
        int yr = find(y);
        if (xr != yr) {
            parent[xr] = yr;
            size[yr] += size[xr];
        }
    }

    int getSize(int x) {
        return size[find(x)];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int N = graph.size();
        DSU dsu(N);

        // Build connected components
        for (int i = 0; i < N; ++i)
            for (int j = i + 1; j < N; ++j)
                if (graph[i][j] == 1)
                    dsu.unite(i, j);

        // Count how many infected nodes in each component
        vector<int> count(N, 0);
        for (int node : initial)
            count[dsu.find(node)]++;

        // Choose the best node to remove
        int ans = -1, maxSize = -1;
        for (int node : initial) {
            int root = dsu.find(node);
            if (count[root] == 1) {
                int rootSize = dsu.getSize(root);
                if (rootSize > maxSize || (rootSize == maxSize && node < ans)) {
                    maxSize = rootSize;
                    ans = node;
                }
            }
        }

        // If no node uniquely infects a component, return the smallest index
        if (ans == -1) {
            ans = *min_element(initial.begin(), initial.end());
        }

        return ans;
    }
};
